{"meta":{"title":"世界尽头","subtitle":null,"description":"要来一杯吗?","author":"RagdoLL","url":""},"pages":[{"title":"about","date":"2022-08-07T14:14:36.000Z","updated":"2022-08-07T08:59:52.153Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[想学烘培のRagdoLL] 与&nbsp; &nbsp; （ ） RagdoLL 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2022-08-09T15:13:35.000Z","updated":"2022-08-09T15:01:34.860Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2022-08-08T06:38:48.000Z","updated":"2022-08-09T14:59:59.204Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2022-08-08T15:13:48.000Z","updated":"2022-08-09T16:34:22.721Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"你是突然的惊喜 但我超勇的！！！（不是 有空一起打Apex啦~","keywords":"我的朋友很少"},{"title":"donate","date":"2022-08-09T15:13:05.000Z","updated":"2022-08-09T15:02:17.245Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2022-08-09T15:11:06.000Z","updated":"2022-08-09T15:03:35.735Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2022-08-07T15:14:28.000Z","updated":"2022-08-09T16:59:51.650Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"Voice"},{"title":"lab","date":"2022-08-09T13:47:59.000Z","updated":"2022-08-09T17:24:18.625Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"我的小破站感谢光顾哦~","keywords":"Lab实验室"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2022-08-09T14:56:49.055Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2022-08-09T15:07:03.833Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"theme-sakura","date":"2022-08-09T14:53:25.000Z","updated":"2022-08-09T17:26:48.978Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢分享作者honjun，感谢原作者Mashiro~","keywords":"Hexo 主题 Sakura 🌸"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux DHT11 温湿度传感器 字符设备驱动","slug":"Linux-DHT11-温湿度传感器-字符设备驱动","date":"2022-08-15T14:00:24.000Z","updated":"2022-08-15T14:14:00.990Z","comments":true,"path":"2022/08/15/Linux-DHT11-温湿度传感器-字符设备驱动/","link":"","permalink":"/2022/08/15/Linux-DHT11-温湿度传感器-字符设备驱动/","excerpt":"","text":"Linux DHT11 温湿度传感器 字符设备驱动模块介绍DHT11简介 ​ DHT11数字温湿度传感器是一款含有已校准数字信号输出的温湿度复合传 感器。它应用专用的数字模块采集技术和温湿度传感技术，确保产品具有极高 的可靠性与卓越的长期稳定性。传感器包括一个电阻式感湿元件和一个NTC测 温元件，并与一个高性能8位单片机相连接。因此该产品具有品质卓越、超快 响应、抗干扰能力强、性价比极高等优点。每个DHT11传感器都在极为精确的 湿度校验室中进行校准。校准系数以程序的形式储存在OTP内存中，传感器内 部在检测信号的处理过程中要调用这些校准系数。单线制串行接口，使系统集 成变得简易快捷。超小的体积、极低的功耗，信号传输距离可达20米以上，使 其成为各类应用甚至最为苛刻的应用场合的最佳选则。 相关参数： 典型应用电路​ 电源引脚​ 供电电压范围3—5.5V 。传感器上电后，要等待1s以越过不稳定状态 ，此 期间无需发送任何指令。电源引脚（VDD，GND）之间可增加一个100nF 的电容，用以去 耦滤波。 串行接口 (单线双向)​ DATA 用于微处理器与 DHT11之间的通讯和同步,采用单总线数据格式,一次 通讯时间4ms左右,数据分小数部分和整数部分,具体格式在下面说明,当前小数 部分用于以后扩展,现读出为零.操作流程如下: ​ 一次完整的数据传输为40bit,高位先出。 ​ 数据格式:8bit湿度整数数据+8bit湿度小数数据 +8bi温度整数数据+8bit温度小数数据 +8bit校验和 ​ 数据传送正确时校验和数据等于“8bit湿度整数数据+8bit湿度小数数据 +8bi温度整数数据+8bit温度小数数据”所得结果的末8位 通讯过程​ 用户MCU发送一次开始信号后,DHT11从低功耗模式转换到高速模式,等待主 机开始信号结束后,DHT11发送响应信号,送出40bit的数据,并触发一次信号采集, 用户可选择读取部分数据.从模式下,DHT11接收到开始信号触发一次温湿度采集, 如果没有接收到主机发送开始信号,DHT11不会主动进行温湿度采集.采集数据后 转换到低速模式。 ​ 总线空闲状态为高电平,主机把总线拉低等待DHT11响应,主机把总线拉低必 须大于18毫秒,保证DHT11能检测到起始信号。DHT11接收到主机的开始信号后, 等待主机开始信号结束,然后发送80us低电平响应信号.主机发送开始信号结束 后,延时等待20-40us后, 读取DHT11的响应信号,主机发送开始信号后,可以切换 到输入模式,或者输出高电平均可, 总线由上拉电阻拉高。 ​ 总线为低电平,说明DHT11发送响应信号,DHT11发送响应信号后,再把总线拉 高80us,准备发送数据 ,每一bit数据都以50us低电平时隙开始,高电平的长短定 了数据位是0还是1.格式见下面图示.如果读取响应信号为高电平,则DHT11没有 响应,请检查线路是否连接正常.当最后一bit数据传送完毕后，DHT11拉低总线 50us,随后总线由上拉电阻拉高进入空闲状态。 数字0信号表示 数字1信号 ​ 数字0信号与数字1信号的不同之处在于高电平的时间不同，利用这点，我么们可以通过设置电平时间阈值来判断信号的种类。 硬件连接 ​ DHT11 为单总线协议，只有三根数据线，在6818上接到串口处，使用GPIO的复用功能把串口4的RXD引脚变成基础GPIO引脚，参考原理图和硬件手册： ​ 复用开启： mydht11.c#include &lt;linux/module.h&gt; // 驱动模板 #include &lt;linux/kernel.h&gt; // ioctls #include &lt;linux/init.h&gt; #include &lt;linux/fs.h&gt; #include &lt;linux/uaccess.h&gt; // 用户空间 #include &lt;linux/io.h&gt; // 地址映射 #include &lt;linux/cdev.h&gt; #include &lt;linux/device.h&gt; // class device #include &lt;linux/delay.h&gt; #include &lt;asm/irq.h&gt; #define MYDHT11_NAME &quot;mydht11&quot; #define MYDHT11_COUNT 1 // 寄存器物理地址 #define GPIOB_OUT_BASE (0XC001b000) #define GPIOB_OUTENB_BASE (0XC001b004) #define GPIOB_PAD_BASE (0XC001b018) #define GPIOB_ALTFN1_BASE (0XC001b024) // 地址映射后的虚拟地址指针 static void __iomem *GPIOB_OUT; static void __iomem *GPIOB_OUTENB; static void __iomem *GPIOB_PAD; static void __iomem *GPIOB_ALTFN1; //static unsigned int pin_val = 0; // 温湿度结构体 typedef struct{ uint8_t humi_int; //湿度的整数部分 uint8_t humi_deci; //湿度的小数部分 uint8_t temp_int; //温度的整数部分 uint8_t temp_deci; //温度的小数部分 uint8_t check_sum; //校验和 } DHT11_Data_TypeDef; // LED 设备结构体 static struct mydht11_dev { struct cdev cdev; // 字符设备 dev_t devid; // 设备号 struct class *class; // 类 struct device *device; // 设备 int major; // 主设备号 int minor; // 次设备号 }; DHT11_Data_TypeDef DHT11_Data; static struct mydht11_dev mydht11; // 使用到的led设备 static void GPIO_INPUT_MODE(void) { unsigned int pin_val = readl(GPIOB_OUTENB); pin_val &amp;= ~(0x1 &lt;&lt; 28); writel(pin_val, GPIOB_OUTENB); } static void GPIO_OUTPUT_MODE(void) { unsigned int pin_val = readl(GPIOB_OUTENB); pin_val |= (0x1 &lt;&lt; 28); writel(pin_val, GPIOB_OUTENB); } static void GPIO_OUTPUT_LOW(void) { unsigned int pin_val = readl(GPIOB_OUT); pin_val &amp;= ~(0x1 &lt;&lt; 28); writel(pin_val, GPIOB_OUT); } static void GPIO_OUTPUT_HIGH(void) { unsigned int pin_val = readl(GPIOB_OUT); pin_val |= (0x1 &lt;&lt; 28); writel(pin_val, GPIOB_OUT); } static int GPIO_INPUT_VALUE(void) { unsigned int temp = readl(GPIOB_PAD); unsigned int pin_val = temp &amp; (0x1 &lt;&lt; 28); return pin_val; } void DHT11_StartSignal(void) { GPIO_OUTPUT_MODE(); GPIO_OUTPUT_LOW(); mdelay(50); GPIO_INPUT_MODE(); while(GPIO_INPUT_VALUE()); while(!GPIO_INPUT_VALUE()); } void DHT11_EndSignal(void) { //mdelay(20); while(!GPIO_INPUT_VALUE); GPIO_OUTPUT_MODE(); GPIO_OUTPUT_HIGH(); } uint8_t DHT11_ReadByte(void) { uint8_t i, temp = 0; for (i = 0; i &lt; 8; i++) { // 每bit以50us低电平标置开始，轮询直到从机发出的50us低电平结束 while (GPIO_INPUT_VALUE() == 0); // DHT11 以26~28us的高电平表示0，以70us的高电平表示1 // 延时x us 这个延时需要大于数据0持续的时间即可 这里取50us (测试50以下均为0) udelay(50); // 50us 后仍为高电平表示数据1 if (GPIO_INPUT_VALUE()) { // 等待数据1的高电平结束 while(GPIO_INPUT_VALUE()); // 把第7 - i位置1，MSB先行 temp|=(uint8_t)(0x01 &lt;&lt; (7 - i)); } else // 40us 后为低电平表示数据0 temp&amp;=(uint8_t)~(0x01 &lt;&lt; (7 - i)); } //printk(KERN_INFO &quot;temp:%d\\n&quot;, temp); return temp; } uint8_t DHT11_Read_TempAndHumidity(DHT11_Data_TypeDef *DHT11_Data) { local_irq_disable(); // 主机拉低 GPIO_OUTPUT_LOW(); // 延时20ms, (&gt;=18us) mdelay(20); // 总线拉高 主机延时30us GPIO_OUTPUT_HIGH(); // 延时30us, (20~40us) udelay(30); // 主机设为输入 判断从机响应 总线由上拉电阻拉高 GPIO_INPUT_MODE(); // 判断从机是否有低电平响应 如不响应则退出 /*if (GPIO_INPUT_VALUE() == 0) { */ // 轮询直到从机发出的80us 低电平 响应信号结束 while (GPIO_INPUT_VALUE() == 0); // 每次app read前都是高电平闲置 , 直到结束 while (GPIO_INPUT_VALUE()); // 开始接收数据 DHT11_Data-&gt;humi_int= DHT11_ReadByte(); DHT11_Data-&gt;humi_deci= DHT11_ReadByte(); DHT11_Data-&gt;temp_int= DHT11_ReadByte(); DHT11_Data-&gt;temp_deci= DHT11_ReadByte(); DHT11_Data-&gt;check_sum= DHT11_ReadByte(); // 读取结束，引脚改为输出模式 主机拉高 GPIO_OUTPUT_MODE(); printk(KERN_INFO &quot;here1;\\n&quot;); // 检查校验和 if (DHT11_Data-&gt;check_sum == DHT11_Data-&gt;humi_int + DHT11_Data-&gt;humi_deci + DHT11_Data-&gt;temp_int+ DHT11_Data-&gt;temp_deci) { printk(KERN_INFO &quot;here2;\\n&quot;); return 0; } else { printk(KERN_INFO &quot;here3;\\n&quot;); return -1; } /*} else { printk(KERN_INFO &quot;here4;\\n&quot;); return -1; }*/ local_irq_enable(); } static int mydht11_open(struct inode *inode, struct file *filp) { GPIO_OUTPUT_MODE(); GPIO_OUTPUT_HIGH(); unsigned int pin_val = readl(GPIOB_ALTFN1); pin_val &amp;= ~(0x1 &lt;&lt; 25); pin_val |= (0x1 &lt;&lt; 24); writel(pin_val, GPIOB_ALTFN1); return 0; } static int mydht11_release(struct inode *inode, struct file *filp) { return 0; } static ssize_t mydht11_read(struct file *filp, char __user *buf, size_t count, loff_t *fops) { if( DHT11_Read_TempAndHumidity ( &amp; DHT11_Data ) == 0) { printk(KERN_INFO &quot;\\r\\n read ok!\\r\\n\\r\\n humi: %d.%d RH ,temp: %d.%d C \\r\\n&quot;,\\ DHT11_Data.humi_int, DHT11_Data.humi_deci, DHT11_Data.temp_int, DHT11_Data.temp_deci); copy_to_user(buf, &amp;DHT11_Data, count); } else printk(KERN_INFO &quot;Read DHT11 ERROR!\\n&quot;); return count; } static const struct file_operations mydht11_fops = { .owner = THIS_MODULE, .open = mydht11_open, .release = mydht11_release, .read = mydht11_read, }; static int __init mydht11_init(void) { int ret = 0; // 初始化地址映射 GPIOB_OUT = ioremap(GPIOB_OUT_BASE, 4); GPIOB_OUTENB= ioremap(GPIOB_OUTENB_BASE, 4); GPIOB_PAD = ioremap(GPIOB_PAD_BASE, 4); GPIOB_ALTFN1= ioremap(GPIOB_ALTFN1_BASE, 4); // 注册字符设备号 mydht11.major = 0; // 手动清0，表示向系统申请 if (mydht11.major) { // 给定主设备号 mydht11.devid = MKDEV(mydht11.major, 0); ret = register_chrdev_region(mydht11.devid, MYDHT11_COUNT, MYDHT11_NAME); } else { // 没有给定主设备号 ret = alloc_chrdev_region(&amp;mydht11.devid, 0, MYDHT11_COUNT, MYDHT11_NAME); mydht11.major = MAJOR(mydht11.devid); mydht11.minor = MINOR(mydht11.devid); } if (ret &lt; 0) { printk(KERN_INFO &quot;mydht11 chrdev_region failed!!!\\n&quot;); goto fail_devid; } printk(KERN_INFO &quot;mydht11 major=%d, ninor=%d \\n&quot;, mydht11.major, mydht11.minor); // 注册字符设备 mydht11.cdev.owner = THIS_MODULE; cdev_init(&amp;mydht11.cdev, &amp;mydht11_fops); ret = cdev_add(&amp;mydht11.cdev, mydht11.devid, MYDHT11_COUNT); if (ret &lt; 0) goto fail_cdev; // 自动创建设备节点 mydht11.class = class_create(THIS_MODULE, MYDHT11_NAME); if (IS_ERR (mydht11.class)) { ret = PTR_ERR(mydht11.class); goto fail_class; } // 创建设备 mydht11.device = device_create(mydht11.class, NULL, mydht11.devid, NULL, MYDHT11_NAME); if (IS_ERR (mydht11.device)) { ret = PTR_ERR(mydht11.device); goto fail_device; } printk(KERN_INFO &quot;mydht11_init\\n&quot;); return 0; fail_device: class_destroy(mydht11.class); fail_class: cdev_del(&amp;mydht11.cdev); fail_cdev: unregister_chrdev_region(mydht11.devid, MYDHT11_COUNT); fail_devid: iounmap(GPIOB_OUT); iounmap(GPIOB_OUTENB); iounmap(GPIOB_PAD); iounmap(GPIOB_ALTFN1); return ret; } static void __exit mydht11_exit(void) { // 删除设备 device_destroy(mydht11.class, mydht11.devid); // 删除类 class_destroy(mydht11.class); // 注销字符设备 cdev_del(&amp;mydht11.cdev); // 注销字符设备号 unregister_chrdev_region(mydht11.devid, MYDHT11_COUNT); // 取消地址映射 iounmap(GPIOB_OUT); iounmap(GPIOB_OUTENB); iounmap(GPIOB_PAD); iounmap(GPIOB_ALTFN1); printk(KERN_INFO &quot;mydht11_exit\\n&quot;); } // 模块入口和出口 module_init(mydht11_init); // 入口 module_exit(mydht11_exit); // 出口 MODULE_LICENSE(&quot;GPL&quot;); MODULE_AUTHOR(&quot;RagdoLL&quot;); makefileKERNEL_DIR := /opt/wkspace/Linux_Drivers/kernel-3.4.39/ CURRENT_PATH := $(shell pwd) GCC_TOOLS := /usr/local/arm/arm-eabi-4.8/bin/arm-eabi- obj-m := myDHT11.o build : kernel_modules kernel_modules: make modules -C $(KERNEL_DIR) M=$(CURRENT_PATH) CROSS_COMPILE=$(GCC_TOOLS) clean: make modules clean -C $(KERNEL_DIR) M=$(CURRENT_PATH) CROSS_COMPILE=$(GCC_TOOLS) app.c#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;sys/stat.h&gt; #include &lt;sys/types.h&gt; #include &lt;fcntl.h&gt; #include &lt;string.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/ioctl.h&gt; #include &lt;stdint.h&gt; struct DHT11_DATA{ uint8_t humi_int; uint8_t humi_deci; uint8_t temp_int; uint8_t temp_deci; uint8_t check_sum; }; struct DHT11_DATA DHT11_Data; int main() { int fd,ret; unsigned char buf[4] = {0}; fd = open(&quot;/dev/mydht11&quot;, O_RDWR); if(fd &lt; 0){ perror(&quot;open failed !\\n&quot;); exit(1); } while(1) { bzero(&amp;DHT11_Data, sizeof(DHT11_Data)); ret = read(fd, &amp;DHT11_Data, sizeof(DHT11_Data)); if(ret &lt; 0){ perror(&quot;read failed !\\n&quot;); exit(1); } printf(&quot;humi: %d.%d, temp: %d.%d\\n&quot;,DHT11_Data.humi_int,\\ DHT11_Data.humi_deci,DHT11_Data.temp_int,DHT11_Data.temp_deci); usleep(2100000); } close(fd); return 0; }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Git 基本学习","slug":"Git-基本学习","date":"2022-08-07T07:51:06.000Z","updated":"2022-08-09T17:06:28.170Z","comments":true,"path":"2022/08/07/Git-基本学习/","link":"","permalink":"/2022/08/07/Git-基本学习/","excerpt":"","text":"GitGit 命令 git 常用命令 作用 git config –global user.name 用户名 设置用户签名 git config –global user.email 邮箱 设置用户签名 git init 初始化本地库 git status 查看本地库状态 git add 文件名 添加到暂存区 git rm –cached 文件名 从暂存区中移除 git commit -m “日志信息” 文件名 提交到本地库 git reflog 查看历史版本信息 git log 查看历史版本详细信息 git reset –hard 版本号 版本穿梭 ​ Git 版本控制底层基于 head 指针实现（单分支）： ​ 切换版本时（单分支）： Git 分支 什么是分支​ 在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本（分支底层其实也是指针的引用）。 分支的好处​ 同时并行推进多个功能的开发，提高开发效率。 ​ 各个分支在开发过程中，如果一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。 ​ master、hot-fix都是指向具体版本记录的指针。当前所在的分支，其实是由 head 决定的，所以创建分支时的本质就是多创建了一个指针。 ​ head 如果指向 master，那么现在就在 master 分支上。 ​ head 如果指向 hot-fix， 那么现在就在 hot-fix 分支上。 ​ 所以切换分支的本质就是移动 head 指针。 分支操作命令 命令 作用 git branch 分支名 创建分支 git branch -v 查看分支 git checkout 分支名 切换分支 git merge 分支名 把指定的分支合并到当前分支上 冲突合并​ 合并分支时，两个分支在同一个文件的同一个位置（不一定是同一行代码）有两套完全不同的修改，Git 无法替我们决定使用哪一个修改。必须认为决定新代码内容。 ​ 不同一行代码的情况：分别留下各个分支修改后的代码，多余的信息、各个分支里没有修改但在其他分支里被修改的代码都删掉。在被合并分支添加到暂存区后提交本地库（此时提交不能带文件名 git commit -m “merge test”）。 ​ Git 远程库远程库操作命令 远程库命令 作用 git remove -v 查看当前所有远程地址名称 git remote add 别名 远程地址 起别名 git push 别名 分支 推送本地分支上的内容到远程库 git clone 远程地址 将远程仓库的内容克隆到本地 git pull 远程库地址别名 远程分支名 将远程仓库对于分支最新内容拉下来后与本地分支直接合并 git clone 会做如下操作：1、拉取代码。2、初始化本地库。3、创建别名 SSH 免密登录​ 进入到 C 盘的用户目录下，先确保没有 .ssh 文件夹，有则删除。输入以下命令生成公钥和私钥 ssh-keygen -t rsa -C 694567618@qq.com ​ 输入行命令后按三次回车 ​ cat 公钥，进入 GitHub 的 Settings ​ new 一个 SHH key push 和 pull 命令 一致，换成 SSH的地址即可 GiteeGitee 导入 GitHub 项目","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"New world and Say YaHalo!","slug":"New-world-and-Say-YaHalo","date":"2022-08-07T07:51:06.000Z","updated":"2022-08-09T17:08:19.641Z","comments":true,"path":"2022/08/07/New-world-and-Say-YaHalo/","link":"","permalink":"/2022/08/07/New-world-and-Say-YaHalo/","excerpt":"","text":"了解你的捍卫者Introducing Your Champion by 天才美少女卡莎，飞天狙想要努力变胖，甜药Jarmen","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-05-16T07:51:06.000Z","updated":"2022-08-09T17:15:21.373Z","comments":true,"path":"2022/05/16/hello-world/","link":"","permalink":"/2022/05/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}